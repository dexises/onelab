basePath: /api/v1
definitions:
  handler.errorResponse:
    properties:
      message:
        type: string
    type: object
  handler.tokenMessage:
    properties:
      message:
        type: string
    type: object
  model.Book:
    properties:
      author:
        type: string
      price:
        type: integer
      title:
        type: string
    type: object
  model.BookReader:
    properties:
      book_id:
        type: integer
      book_title:
        type: string
      createdAt:
        description: '`json:"created_at"`'
        type: string
      id:
        type: integer
      reader_id:
        type: integer
      returnedAt:
        description: '`json:"returned_at"`'
        type: string
      takenAt:
        description: '`json:"taken_at"`'
        type: string
      transactionID:
        type: integer
      updatedAt:
        type: string
    type: object
  model.BookRentSummary:
    properties:
      income:
        type: integer
      reader_id:
        type: integer
      title:
        type: string
    type: object
  model.CreateBookReader:
    properties:
      book_id:
        type: integer
      createdAt:
        type: string
      reader_id:
        type: integer
      takenAt:
        type: string
      transactionID:
        type: integer
      updatedAt:
        type: string
    type: object
  model.Login:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.User:
    properties:
      balance:
        type: integer
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: omashevadlet@gmail.com
    name: dexises
  description: Api server for library
  termsOfService: http://swagger.io/terms/
  title: OnelabProject
  version: "1.0"
paths:
  /books/:
    get:
      consumes:
      - application/json
      description: Get all book
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Get all book
      tags:
      - books
  /books/{id}:
    get:
      consumes:
      - application/json
      description: Get book by id
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            $ref: '#/definitions/model.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Get book by id
      tags:
      - books
  /books/create:
    post:
      consumes:
      - application/json
      description: Create book
      parameters:
      - description: Create book
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Your book is created <id>
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create book
      tags:
      - books
  /library/all:
    get:
      consumes:
      - application/json
      description: Lists of borrowed books with income
      parameters:
      - description: List of borrowed books with income
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.BookRentSummary'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BookRentSummary'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Lists of borrowed books with income
      tags:
      - Library
  /library/give-book:
    post:
      consumes:
      - application/json
      description: Create user borrow book
      parameters:
      - description: Create book reader
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.CreateBookReader'
      produces:
      - application/json
      responses:
        "201":
          description: Thanks for picking up the book
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Create user borrow book
      tags:
      - Library
  /library/return-book:
    post:
      consumes:
      - application/json
      description: Create user return book
      parameters:
      - description: Create book return
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.BookReader'
      produces:
      - application/json
      responses:
        "200":
          description: Your book is returned
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: Create user return book
      tags:
      - Library
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user
      tags:
      - User manipulation
    put:
      consumes:
      - application/json
      description: Update user password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User successfully updated
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user password
      tags:
      - User manipulation
  /users/create:
    post:
      consumes:
      - application/json
      description: User create
      parameters:
      - description: Create account
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: Your user is created <id>
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: User create
      tags:
      - Auth
  /users/login:
    post:
      consumes:
      - application/json
      description: User login
      parameters:
      - description: Login into account
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.tokenMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: User login
      tags:
      - Auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
